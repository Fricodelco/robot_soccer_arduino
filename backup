//walk from 11.03.19
void Moves::Walk1(){
  setMotorsEnc(350,656,232,783,300,724,358,665, 512,512, 395,549, 412,618,549,405, 502,512, 512,512,45);
  setMotorsEnc(350,656,232,783,300,724,358,665, 502,541, 402,557, 412,618,556,413,531,541, 512,512,45);
  setMotorsEnc(350,656,232,783,300,724,358,665, 502,541, 411,595, 412,672,565,397,531,541, 512,512,45);
  setMotorsEnc(350,656,232,783,300,724,358,665, 502,542, 417,634, 412,726,571,383,532,542, 512,512,45);
 
  setMotorsEnc(350,656,232,783,300,724,358,665, 502,541, 423,650, 412,752,577,382,531,541, 512,512,45);
  setMotorsEnc(350,656,232,783,300,724,358,665, 502,541, 430,667, 412,748,584,393,531,541, 512,512,45);
  setMotorsEnc(350,656,232,783,300,724,358,665, 502,554, 435,671, 412,714,587,420,544,544, 512,512,45);
  setMotorsEnc(350,656,232,783,300,724,358,665, 502,539, 440,628, 412,652,594,460,529,539, 512,512,45);
  setMotorsEnc(350,656,232,783,300,724,358,665, 502,524, 446,626, 412,618,600,482,514,524, 512,512,45);
  setMotorsEnc(350,656,232,783,300,724,358,665, 512,512, 452,620, 412,618,606,486,502,512, 512,512,45);
                    
  setMotorsEnc(350,656,232,783,300,724,358,665, 502,512, 465,619, 412,618,619,475,502,512, 512,512,45);
  setMotorsEnc(350,656,232,783,300,724,358,665, 463,502, 457,612, 412,618,611,468,473,483, 512,512,45);
  setMotorsEnc(350,656,232,783,300,724,358,665, 463,502, 419,603, 358,618,627,459,473,483, 512,512,45);
  setMotorsEnc(350,656,232,783,300,724,358,665, 462,502, 380,597, 304,618,641,453,472,482, 512,512,45);
  setMotorsEnc(350,656,232,783,300,724,358,665, 463,502, 354,591, 278,618,642,447,473,483, 512,512,45);
  
  setMotorsEnc(350,656,232,783,300,724,358,665, 463,502, 347,584, 282,618,631,440,473,483, 512,512,45);
  setMotorsEnc(350,656,232,783,300,724,358,665, 464,502, 358,579, 326,618,598,435,474,484, 512,512,45);
  setMotorsEnc(350,656,232,783,300,724,358,665, 465,502, 376,574, 378,618,564,430,475,485, 512,512,45);
  setMotorsEnc(350,656,232,783,300,724,358,665, 480,502, 388,568, 412,618,542,424,490,500, 512,512,45);
  setMotorsEnc(350,656,232,783,300,724,358,665, 512,512, 384,562, 412,618,538,418,502,512, 512,512,45);
                    
  
}
//walk from 18:56 14.03
void Moves::Walk1(){
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,2, -31,13,  -29,31, 10,-31, 0,2, 0,0,500);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,5, -29,15,  -29,31, 12,-29, 5,8, 0,0,500);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -27,26,  -29,45, 15,-33, 5,8, 0,0,500);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -25,38,  -29,72, 17,-37, 5,8, 0,0,500);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -23,46,  -29,80, 18,-38, 5,8, 0,0,500);
  
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -21,48,  -29,79, 20,-35, 5,8, 0,0,500);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -19,45,  -29,69, 22,-25, 5,8, 0,0,500);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -18,39,  -29,41, 23,-15, 8,8, 0,0,500);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -16,36,  -31,31,  25,-8, 3,6,  0,0,500);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,0, -14,37,  -31,31,  27,-7, 0,0,    0,0,500);
                    
  setMotors(-45,45,-80,80,-70,70,-45,45, -2,0,  -13,31, -29,31, 31,-10, -2,0,   0,0,500);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -15,29, -29,31, 29,-12, -8,-5, 0,0,500);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -27,26, -45,31, 33,-15, -8,-5, 0,0,500);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -38,25, -72,31, 37,-17, -8,-5, 0,0,500);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -46,23, -80,31, 38,-18, -8,-5, 0,0,500);
 
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -48,21, -79,31, 35,-20, -8,-5, 0,0,500);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -45,19, -69,31, 25,-22, -8,-5, 0,0,500);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -39,18, -51,31, 15,-23, -8,-8, 0,0,500);
  setMotors(-45,45,-80,80,-70,70,-45,45, -5,-0, -36,16, -31,31,  8,-25,-6, -6,-3,  0,500);
  setMotors(-45,45,-80,80,-70,70,-45,45,  0,0,  -37,14, -31,31,  7,-27,     0,0,  0,0,500);
                    
}

// walk from 19:56 14.03
void Moves::Walk1(){
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,2, -31,13,  -29,31, 16,-16, 0,2, 0,0,45);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,5, -29,15,  -29,31, 20,-29, 8,8, 0,0,70);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -27,26,  -29,45, 15,-33, 8,8, 0,0,60);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -25,38,  -29,72, 20,-37, 8,8, 0,0,60);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -23,46,  -29,80, 20,-38, 8,8, 0,0,45);
  
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -21,48,  -29,79, 20,-35, 8,8, 0,0,45);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -19,45,  -29,69, 22,-25, 8,8, 0,0,45);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -18,39,  -29,41, 23,-16, 8,8, 0,0,60);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -16,36,  -31,31,  25,-20, 8,6,  0,0,60);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,0, -14,37,  -31,31,  27,-20, 0,0,    0,0,50);
                    
  setMotors(-45,45,-80,80,-70,70,-45,45, -2,0,  -13,31, -29,31, 31,-10, -2,0,   0,0,45);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -15,29, -29,31, 29,-12, -8,-8, 0,0,70);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -27,26, -45,31, 33,-15, -8,-8, 0,0,60);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -38,25, -72,31, 37,-17, -8,-8, 0,0,60);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -46,23, -80,31, 38,-18, -8,-8, 0,0,45);
 
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -48,21, -79,31, 35,-20, -8,-8, 0,0,45);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -45,19, -69,31, 25,-22, -8,-8, 0,0,45);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -39,18, -51,31, 20,-23, -8,-8, 0,0,60);
  setMotors(-45,45,-80,80,-70,70,-45,45, -5,-0, -36,16, -31,31,  20,-26,-6, -6,-3,  0,60);
  setMotors(-45,45,-80,80,-70,70,-45,45,  0,0,  -37,14, -31,31,  20,-26,     0,0,  0,0,50);
                    
}

// walk from 20:09 14.03
setMotors(-45,45,-80,80,-70,70,-45,45, 0,2, -31,13,  -29,31, 16,-16, 0,2, 0,0,45);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,5, -29,15,  -29,31, 20,-29, 8,8, 0,0,70);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -27,26,  -29,45, 15,-29, 8,8, 0,0,60);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -25,38,  -29,72, 20,-32, 8,8, 0,0,60);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -23,46,  -29,80, 20,-33, 8,8, 0,0,45);
  
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -21,48,  -29,79, 20,-30, 8,8, 0,0,45);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -19,45,  -29,69, 22,-25, 8,8, 0,0,45);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -18,39,  -29,41, 23,-16, 8,8, 0,0,60);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -16,36,  -31,31,  25,-20, 8,6,  0,0,60);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,0, -14,37,  -31,31,  27,-20, 0,0,    0,0,50);
                    
  setMotors(-45,45,-80,80,-70,70,-45,45, -2,0,  -13,31, -29,31, 31,-10, -2,0,   0,0,45);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -15,29, -29,31, 29,-12, -8,-8, 0,0,70);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -27,26, -45,31, 29,-15, -8,-8, 0,0,60);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -38,25, -72,31, 32,-17, -8,-8, 0,0,60);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -46,23, -80,31, 33,-18, -8,-8, 0,0,45);
 
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -48,21, -79,31, 30,-20, -8,-8, 0,0,45);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -45,19, -69,31, 25,-22, -8,-8, 0,0,45);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -39,18, -51,31, 20,-23, -8,-8, 0,0,60);
  setMotors(-45,45,-80,80,-70,70,-45,45, -5,-0, -36,16, -31,31,  20,-26,-6, -6,-3,  0,60);
  setMotors(-45,45,-80,80,-70,70,-45,45,  0,0,  -37,14, -31,31,  20,-26,     0,0,  0,0,50);
}

//walk from 16:12 15.03
void Moves::Walk1(){
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,2, -34,16,  -29,31, 20,-23, 0,2, 0,0,45);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,5, -32,18,  -29,31, 18,-23, 8,8, 0,0,70);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -30,29,  -29,45, 19,-25, 8,8, 0,0,70);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -28,41,  -29,72, 20,-30, 8,8, 0,0,70);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -26,49,  -29,80, 20,-30, 8,8, 0,0,45);
  
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -24,51,  -29,79, 20,-28, 8,8, 0,0,45);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -23,48,  -29,69, 22,-25, 8,8, 0,0,70);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -21,42,  -29,41, 23,-23, 6,6, 0,0,70);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -19,39,  -31,31,  24,-20, 3,3,  0,0,70);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,0, -17,40,  -31,31,  24,-20, 0,0,    0,0,45); //small time
                    
  setMotors(-45,45,-80,80,-70,70,-45,45, -2,0,  -16,34, -29,31, 23,-20, -2,0,   0,0,45);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -18,32, -29,31, 23,-18, -8,-8, 0,0,70);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -30,29, -45,31, 25,-19, -8,-8, 0,0,70);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -41,28, -72,31, 30,-20, -8,-8, 0,0,70);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -49,26, -80,31, 30,-20, -8,-8, 0,0,45);
 
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -51,24, -79,31, 25,-20, -8,-8, 0,0,45);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -48,22, -69,31, 25,-22, -8,-8, 0,0,70);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -42,21, -51,31, 23,-23, -6,-6, 0,0,70);
  setMotors(-45,45,-80,80,-70,70,-45,45, -5,-0, -39,19, -31,31,  20,-24,-3,-3, 0,0,70);
  setMotors(-45,45,-80,80,-70,70,-45,45,  0,0,  -40,17, -31,31,  20,-24,  0,0, 0,0,45);
                    
}

// walk from 16:39 15.03
void Moves::Walk1(){
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,2, -31,13,  -29,31, 10,-31, 0,2, 0,0,45);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,5, -29,15,  -29,31, 12,-29, 8,8, 0,0,70);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -27,26,  -29,45, 15,-29, 8,8, 0,0,60);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -25,38,  -29,72, 17,-32, 8,8, 0,0,60);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -23,46,  -29,80, 18,-33, 8,8, 0,0,45);
  
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -21,48,  -29,79, 20,-30, 8,8, 0,0,45);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -19,45,  -29,69, 22,-25, 8,8, 0,0,45);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -18,39,  -29,41, 23,-20, 6,6, 0,0,60);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -16,36,  -31,31,  26,-20, 3,3,  0,0,60);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,0, -14,37,  -31,31,  26,-20, 0,0,    0,0,50);
                    
  setMotors(-45,45,-80,80,-70,70,-45,45, -2,0,  -13,31, -29,31, 31,-10, -2,0,   0,0,45);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -15,29, -29,31, 29,-12, -8,-8, 0,0,70);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -27,26, -45,31, 29,-15, -8,-8, 0,0,60);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -38,25, -72,31, 32,-17, -8,-8, 0,0,60);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -46,23, -80,31, 33,-18, -8,-8, 0,0,45);
 
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -48,21, -79,31, 30,-20, -8,-8, 0,0,45);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -45,19, -69,31, 25,-22, -8,-8, 0,0,45);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -39,18, -51,31, 20,-23, -6,-6, 0,0,60);
  setMotors(-45,45,-80,80,-70,70,-45,45, -5,-0, -36,16, -31,31,  20,-26,-3,-3,0,  0,60);
  setMotors(-45,45,-80,80,-70,70,-45,45,  0,0,  -37,14, -31,31,  20,-26, 0,0,  0,0,50);
}

 setMotors(-45,45,-80,80,-70,70,-45,45,-1,1,-69,69,-103,103,51,-51,-6,-7,0,0,100);
  setMotors(-45,45,-80,80,-70,70,-45,45,-7,4,-75,66,-122,96,65,-54,-10,-5,0,0,100);
  setMotors(-45,45,-80,80,-70,70,-45,45,-1,1,-75,63,-103,103,46,-60,-1,-1,0,0,100);
 
  setMotors(-45,45,-80,80,-70,70,-45,45,-1,1,-69,69,-103,103,51,-51,7,6,0,0,100);
  setMotors(-45,45,-80,80,-70,70,-45,45,-4,7,-66,75, -96,122,54,-65,5,10,0,0,100);
  setMotors(-45,45,-80,80,-70,70,-45,45,-1,1,-63,75,-103,103,60,-46,-1,-1,0,0,100);
}

// walk from 19:23 15.03
void Moves::FLT_L_M(){
  setMotors(-81,80,-68,68,-14,14,-45,45,-1,1,-70,58,-103,103,48,-57, 7,16,0,0,50);
  setMotors(-81,80,-68,68,-14,14,-45,45,-4,7,-67,76,-103,132,54,-66, 4,10,0,0,50);
  setMotors(-81,80,-68,68,-14,14,-45,15,-1,1,-58,64,-103,103,57,-48,-1,-1,0,0,50);
  setMotors(-81,80,-68,68,-14,14,-15,45,-1,1,-58,70,-103,103,57,-48,-16,-7,0,0,50);
  setMotors(-81,80,-68,68,-14,14,-45,45,-7,4,-76,67,-132,103,66,-54,-10,-4,0,0,50);
  setMotors(-81,80,-68,68,-14,14,-45,45,-1,1,-64,58,-103,103,48,-57,-1,-1,0,0,50);
}

//walk from 20:30 15.03
void Moves::FLT_L_M(){
  setMotors(-45,45,-68,68,-14,14,-45,45,-1,1,-70,58,-98,98, 48,-57,  7,16,0,0,40);
  setMotors(-45,45,-68,68,-14,14,-45,45,-4,7,-67,76,-98,137, 54,-66,  4,10,0,0,40);
  setMotors(-45,45,-68,68,-14,14,-45,45,-1,1,-58,64,-98,98, 57,-48, -1,-1,0,0,40);
  setMotors(-45,45,-68,68,-14,14,-45,45,-1,1,-58,70,-98,98, 57,-48, -16,-7,0,0,40);
  setMotors(-45,45,-68,68,-14,14,-45,45,-7,4,-76,67,-137,98, 66,-54, -10,-4,0,0,40);
  setMotors(-45,45,-68,68,-14,14,-45,45,-1,1,-64,58,-98,98, 48,-57,  -1,-1,0,0,40);
}
//walk from 20:56 15.03
void Moves::FFT_M(){
  setMotors(-45,45,-68,68,-14,14,-45,45,-1,1,-70,58,-98,98, 48,-57,  7,16,0,0,40);
  setMotors(-45,45,-68,68,-14,14,-45,45,-4,7,-67,76,-98,137, 54,-66,  4,10,0,0,40);
  setMotors(-45,45,-68,68,-14,14,-45,45,-1,1,-58,64,-98,98, 57,-48, -1,-1,0,0,40);
  setMotors(-45,45,-68,68,-14,14,-45,45,-1,1,-58,70,-98,98, 57,-48, -16,-7,0,0,40);
  setMotors(-45,45,-68,68,-14,14,-45,45,-7,4,-76,67,-137,98, 66,-54, -10,-4,0,0,40);
  setMotors(-45,45,-68,68,-14,14,-45,45,-1,1,-64,58,-98,98, 48,-57,  -1,-1,0,0,40);
}
void Moves::FLT_M(){
  setMotors(-45,45,-68,68,-14,14,-45,45,-1,1,-70,58,-98,98, 48,-57,  7,16,0,0,50);
  setMotors(-45,45,-68,68,-14,14,-45,45,-4,7,-67,76,-98,137, 54,-66,  4,10,0,0,50);
  setMotors(-45,45,-68,68,-14,14,-45,15,-1,1,-58,64,-98,98, 57,-48, -1,-1,0,0,50);
  setMotors(-45,45,-68,68,-14,14,-15,45,-1,1,-58,70,-98,98, 57,-48, -16,-7,0,0,50);
  setMotors(-45,45,-68,68,-14,14,-45,45,-7,4,-76,67,-137,98, 66,-54, -10,-4,0,0,50);
  setMotors(-45,45,-68,68,-14,14,-45,45,-1,1,-64,58,-98,98, 48,-57,  -1,-1,0,0,50);
}
void Moves::FRT_M(){
  setMotors(-45,45,-68,68,-14,14,-45,45,-1,1,-70,58,-98,98, 48,-57,  7,16,0,0,50);
  setMotors(-45,45,-68,68,-14,14,-45,45,-4,7,-67,76,-98,137, 54,-66,  4,10,0,0,50);
  setMotors(-45,45,-68,68,-14,14,-45,75,-1,1,-58,64,-98,98, 57,-48, -1,-1,0,0,50);
  setMotors(-45,45,-68,68,-14,14,-75,45,-1,1,-58,70,-98,98, 57,-48, -16,-7,0,0,50);
  setMotors(-45,45,-68,68,-14,14,-45,45,-7,4,-76,67,-137,98, 66,-54, -10,-4,0,0,50);
  setMotors(-45,45,-68,68,-14,14,-45,45,-1,1,-64,58,-98,98, 48,-57,  -1,-1,0,0,50);
}

//ALL moves from 10:11 18.03
#include "move.h"
#define DEVICE_NAME "3" 

#define BAUDRATE  1000000
int32_t goal_position[20];
uint16_t model_number;
uint8_t dxl_id[20];
const uint8_t handler_index = 0;

DynamixelWorkbench dxl_wb;
void Moves::initialization()
{
  
  model_number = 0;
  dxl_wb.init(DEVICE_NAME, BAUDRATE);
  for (int i = 0; i<20; i++){
    dxl_id[i]=i+1;
  }
  for (int cnt = 0; cnt < 20; cnt++)
  {
    dxl_wb.ping(dxl_id[cnt], &model_number);
    dxl_wb.jointMode(dxl_id[cnt], 450, 0); 
  }
  dxl_wb.addSyncWriteHandler(dxl_id[0], "Goal_Position");
}
void Moves::setMotors(int m1,int m2,int m3,int m4,int m5,int m6,int m7,int m8,int m9,int m10,int m11,int m12,int m13,int m14,int m15,int m16,int m17,int m18,int m19,int m20,int delayy){
  bool result = false;
  goal_position[0]=map(m1,-150,150,0,1023);
  goal_position[1]=map(m2,-150,150,0,1023);
  goal_position[2]=map(m3,-150,150,0,1023);
  goal_position[3]=map(m4,-150,150,0,1023);
  goal_position[4]=map(m5,-150,150,0,1023);
  goal_position[5]=map(m6,-150,150,0,1023);
  goal_position[6]=map(m7,-150,150,0,1023);
  goal_position[7]=map(m8,-150,150,0,1023);
  goal_position[8]=map(m9,-150,150,0,1023);
  goal_position[9]=map(m10,-150,150,0,1023);
  goal_position[10]=map(m11,-150,150,0,1023);
  goal_position[11]=map(m12,-150,150,0,1023);
  goal_position[12]=map(m13,-150,150,0,1023);
  goal_position[13]=map(m14,-150,150,0,1023);
  goal_position[14]=map(m15,-150,150,0,1023);
  goal_position[15]=map(m16,-150,150,0,1023);
  goal_position[16]=map(m17,-150,150,0,1023);
  goal_position[17]=map(m18,-150,150,0,1023);
  goal_position[18]=map(m19,-150,150,0,1023);
  goal_position[19]=map(m20,-150,150,0,1023);
  result=dxl_wb.syncWrite(handler_index, &goal_position[0]);
  delay(delayy);
} 
void Moves::init(){
  setMotors(-81,80,-68,68,-14,14,-45,45,-1,1,-62,62,-100,100,51,-51,-1,1,0,0,1000);
}
void Moves::ready_for_walk(){
  setMotors(-45,45,-80,80,-70,70,-45,45,-1,1,-70,70,-103,102,51,-51,-1,1,0,0,100);
}
void Moves::F_R_S(){
  setMotors(-45,45,-80,80,-70,70,-45,45,-1,1,-69,69,-103,103,51,-51,-6,-7,0,0,100);
  setMotors(-45,45,-80,80,-70,70,-45,45,-7,4,-75,66,-122,96,65,-54,-10,-5,0,0,100);
  setMotors(-45,45,-80,80,-70,70,-45,45,-1,1,-75,63,-103,103,46,-60,-1,-1,0,0,100);
 
  setMotors(-45,45,-80,80,-70,70,-45,45,-1,1,-69,69,-103,103,51,-51,7,6,0,0,100);
  setMotors(-45,45,-80,80,-70,70,-45,45,-4,7,-66,75, -96,122,54,-65,5,10,0,0,100);
  setMotors(-45,45,-80,80,-70,70,-45,45,-1,1,-63,75,-103,103,60,-46,-1,-1,0,0,100);
}
void Moves::FFT_M(){
  setMotors(-45,45,-68,68,-14,14,-45,45,-1,1,-70,58,-98,98, 48,-57,  7,16,0,0,40);
  setMotors(-45,45,-68,68,-14,14,-45,45,-4,7,-67,76,-98,137, 54,-66,  4,10,0,0,40);
  setMotors(-45,45,-68,68,-14,14,-45,45,-1,1,-58,64,-98,98, 57,-48, -1,-1,0,0,40);
  setMotors(-45,45,-68,68,-14,14,-45,45,-1,1,-58,70,-98,98, 57,-48, -16,-7,0,0,40);
  setMotors(-45,45,-68,68,-14,14,-45,45,-7,4,-76,67,-137,98, 66,-54, -10,-4,0,0,40);
  setMotors(-45,45,-68,68,-14,14,-45,45,-1,1,-64,58,-98,98, 48,-57,  -1,-1,0,0,40);
}
void Moves::FLT_M(){
  setMotors(-45,45,-68,68,-14,14,-45,45,-1,1,-70,58,-98,98, 48,-57,  7,16,0,0,50);
  setMotors(-45,45,-68,68,-14,14,-45,45,-4,7,-67,76,-98,137, 54,-66,  4,10,0,0,50);
  setMotors(-45,45,-68,68,-14,14,-45,15,-1,1,-58,64,-98,98, 57,-48, -1,-1,0,0,50);
  setMotors(-45,45,-68,68,-14,14,-15,45,-1,1,-58,70,-98,98, 57,-48, -16,-7,0,0,50);
  setMotors(-45,45,-68,68,-14,14,-45,45,-7,4,-76,67,-137,98, 66,-54, -10,-4,0,0,50);
  setMotors(-45,45,-68,68,-14,14,-45,45,-1,1,-64,58,-98,98, 48,-57,  -1,-1,0,0,50);
}
void Moves::FRT_M(){
 /* setMotors(-45,45,-68,68,-14,14,-45,45,-1,1,-70,58,-98,98, 48,-57,  7,16,0,0,50);
  setMotors(-45,45,-68,68,-14,14,-45,45,-4,7,-67,76,-98,137, 54,-66,  4,10,0,0,50);
  setMotors(-45,45,-68,68,-14,14,-45,75,-1,1,-58,64,-98,98, 57,-48, -1,-1,0,0,50);
  setMotors(-45,45,-68,68,-14,14,-75,45,-1,1,-58,70,-98,98, 57,-48, -16,-7,0,0,50);
  setMotors(-45,45,-68,68,-14,14,-45,45,-7,4,-76,67,-137,98, 66,-54, -10,-4,0,0,50);
  setMotors(-45,45,-68,68,-14,14,-45,45,-1,1,-64,58,-98,98, 48,-57,  -1,-1,0,0,50);*/
  setMotors(-45,45,-68,68,-14,14,-45,45,-1,1,-58,70,-99,98, 57,-48, -19,-7,0,0,50);
  setMotors(-45,45,-68,68,-14,14,-45,45,-7,4,-76,67,-137,98, 66,-54, -10,-4,0,0,50);
  setMotors(-45,45,-68,68,-14,14,-15,45,-1,1,-69,58,-98,98, 48,-57,  -1,1,0,0,50);
  setMotors(-45,45,-68,68,-14,14,-45,15,-1,1,-76,58,-99,98, 45,-60,  7,16,0,0,50);
  setMotors(-45,45,-68,68,-14,14,-45,45,-4,7,-67,76,-99,137, 54,-66,  4,10,0,0,50);
  setMotors(-45,45,-68,68,-14,14,-45,45,-1,1,-58,70,-99,98, 57,-48, -1,-1,0,0,50);
}
void Moves::setMotorsEnc(int m1,int m2,int m3,int m4,int m5,int m6,int m7,int m8,int m9,int m10,int m11,int m12,int m13,int m14,int m15,int m16,int m17,int m18,int m19,int m20,int delayy){
  bool result = false;
  goal_position[0]=m1;
  goal_position[1]=m2;
  goal_position[2]=m3;
  goal_position[3]=m4;
  goal_position[4]=m5;
  goal_position[5]=m6;
  goal_position[6]=m7;
  goal_position[7]=m8;
  goal_position[8]=m9;
  goal_position[9]=m10;
  goal_position[10]=m11;
  goal_position[11]=m12;
  goal_position[12]=m13;
  goal_position[13]=m14;
  goal_position[14]=m15;
  goal_position[15]=m16;
  goal_position[16]=m17;
  goal_position[17]=m18;
  goal_position[18]=m19;
  goal_position[19]=m20;
  result=dxl_wb.syncWrite(handler_index, &goal_position[0]);
  delay(delayy);
}

void Moves::Walk(){
  setMotorsEnc(350,656,232,783,300,724,358,665,512,512,388,566,412,612,527,427,512,512,512,512,45);
  setMotorsEnc(350,656,232,783,300,724,358,665,512,530,398,571,412,612,537,432,530,530,512,512,45);
  setMotorsEnc(350,656,232,783,300,724,358,665,512,544,406,610,412,666,545,417,544,544,512,512,45);
  setMotorsEnc(350,656,232,783,300,724,358,665,512,544,419,634,412,704,558,402,544,544,512,512,45);
  setMotorsEnc(350,656,232,783,300,724,358,665,512,545,430,653,412,726,569,400,545,545,512,512,45);
  setMotorsEnc(350,656,232,783,300,724,358,665,512,544,439,660,412,726,578,407,544,544,512,512,45);
  setMotorsEnc(350,656,232,783,300,724,358,665,512,544,448,661,412,714,587,420,544,544,512,512,45);
  setMotorsEnc(350,656,232,783,300,724,358,665,512,544,452,650,412,674,591,449,544,544,512,512,45);
  setMotorsEnc(350,656,232,783,300,724,358,665,512,531,456,639,412,638,595,474,531,531,512,512,45);
  setMotorsEnc(350,656,232,783,300,724,358,665,512,512,458,634,412,612,597,495,512,512,512,512,45);
                    
  setMotorsEnc(350,656,232,783,300,724,358,665,512,512,458,636,412,612,597,497,512,512,512,512,45);
  setMotorsEnc(350,656,232,783,300,724,358,665,494,512,453,626,412,612,592,487,494,494,512,512,45);
  setMotorsEnc(350,656,232,783,300,724,358,665,480,512,414,618,358,612,607,479,480,480,512,512,45);
  setMotorsEnc(350,656,232,783,300,724,358,665,480,512,390,605,320,612,622,466,480,480,512,512,45);
  setMotorsEnc(350,656,232,783,300,724,358,665,479,512,371,594,298,612,624,455,479,479,512,512,45);
  setMotorsEnc(350,656,232,783,300,724,358,665,480,512,364,585,298,612,617,446,480,480,512,512,45);
  setMotorsEnc(350,656,232,783,300,724,358,665,480,512,363,576,310,612,604,437,480,480,512,512,45);
  setMotorsEnc(350,656,232,783,300,724,358,665,480,512,374,572,350,612,575,433,480,480,512,512,45);
  setMotorsEnc(350,656,232,783,300,724,358,665,493,512,385,568,386,612,550,429,493,493,512,512,45);
  setMotorsEnc(350,656,232,783,300,724,358,665,512,512,390,566,412,612,529,427,512,512,512,512,45);
                    
  
}
//walk from 11.03.19
void Moves::Walk2(){
  setMotorsEnc(350,656,232,783,300,724,358,665, 512,512,388,566,412,612,527,427,512,512, 512,512,70);
  setMotorsEnc(350,656,232,783,300,724,358,665, 512,530,398,571,412,612,537,432,530,530, 512,512,70);
  setMotorsEnc(350,656,232,783,300,724,358,665, 512,544,406,610,412,666,545,417,544,544, 512,512,70);
  setMotorsEnc(350,656,232,783,300,724,358,665, 512,544,419,634,412,704,558,402,544,544, 512,512,70);
  setMotorsEnc(350,656,232,783,300,724,358,665, 512,545,430,653,412,726,569,400,545,545, 512,512,70);
  
  setMotorsEnc(350,656,232,783,300,724,358,665, 512,544,439,660,412,726,578,407,544,544, 512,512,70);
  setMotorsEnc(350,656,232,783,300,724,358,665, 512,544,448,661,412,714,587,420,544,544, 512,512,70);
  setMotorsEnc(350,656,232,783,300,724,358,665, 512,544,452,650,412,674,591,449,544,544, 512,512,70);
  setMotorsEnc(350,656,232,783,300,724,358,665, 502,524, 446,626, 412,618,600,482,514,524, 512,512,70);
  setMotorsEnc(350,656,232,783,300,724,358,665, 512,531,456,639,412,638,595,474,531,531, 512,512,70);
                    
  setMotorsEnc(350,656,232,783,300,724,358,665, 512,512,458,636,412,612,597,497,512,512, 512,512,70);
  setMotorsEnc(350,656,232,783,300,724,358,665, 494,512,453,626,412,612,592,487,494,494, 512,512,70);
  setMotorsEnc(350,656,232,783,300,724,358,665, 480,512,414,618,358,612,607,479,480,480, 512,512,70);
  setMotorsEnc(350,656,232,783,300,724,358,665, 480,512,390,605,320,612,622,466,480,480, 512,512,70);
  setMotorsEnc(350,656,232,783,300,724,358,665, 479,512,371,594,298,612,624,455,479,479, 512,512,70);
  
  setMotorsEnc(350,656,232,783,300,724,358,665, 480,512,364,585,298,612,617,446,480,480, 512,512,70);
  setMotorsEnc(350,656,232,783,300,724,358,665, 480,512,363,576,310,612,604,437,480,480, 512,512,70);
  setMotorsEnc(350,656,232,783,300,724,358,665, 480,512,374,572,350,612,575,433,480,480, 512,512,70);
  setMotorsEnc(350,656,232,783,300,724,358,665, 493,512,385,568,386,612,550,429,493,493, 512,512,70);
  setMotorsEnc(350,656,232,783,300,724,358,665, 512,512,390,566,412,612,529,427,512,512, 512,512,70);
                    
  
}
//

void Moves::Walk1(){
  /*setMotors(-45,45,-80,80,-70,70,-45,45, 0,2, -71,53,  -69,91, 20,-35, 0,2, 0,0,200);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,5, -69,55,  -69,91, 22,-33, 15,3, 0,0,200);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -67,66,  -69,85, 25,-34, 15,3, 0,0,200);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -65,78,  -69,112, 27,-35, 20,3, 0,0,200);
 
  
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -61,88,  -69,119, 30,-35, 15,3, 0,0,200);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -59,85,  -69,109, 32,-35, 15,3, 0,0,200);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,10, -58,79,  -69,81, 33,-30, 5,3, 0,0,200);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,0, -56,76,  -71,71, 36,-30, 0,0,  0,0,200);
  
                    
  setMotors(-45,45,-80,80,-70,70,-45,45, -2,0,  -53,71, -69,71, 41,-20, 0,-2,   0,0,200);
  setMotors(-45,45,-80,80,-70,70,-45,45, -5,-0, -55,69, -69,71, 39,-22, -3,-5, 0,0,200);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -67,66, -85,71, 39,-25, -3,-15, 0,0,200);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -78,65, -112,71, 42,-27, -3,-20, 0,0,200);
  
 
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -88,61, -119,71, 40,-30, -3,-15, 0,0,200);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -85,59, -109,71, 35,-32, -3,-10, 0,0,200);
  setMotors(-45,45,-80,80,-70,70,-45,45, -10,-0, -79,58, -91,71, 30,-33, -3,-5, 0,0,200);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,-0, -76,56, -71,71,  30,-36,-3,0,0,  0,200);
 */
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,2, -31,13,  -29,31, 10,-31, 0,2, 0,0,100);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,5, -29,15,  -29,31, 12,-29, 5,8, 0,0,100);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -27,26,  -29,45, 15,-33, 5,8, 0,0,100);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -25,38,  -29,72, 17,-37, 5,8, 0,0,100);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -23,46,  -29,80, 18,-38, 5,8, 0,0,100);
  
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -21,48,  -29,79, 20,-35, 5,8, 0,0,100);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -19,45,  -29,69, 22,-25, 5,8, 0,0,100);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -18,39,  -29,41, 23,-15, 8,8, 0,0,100);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,8, -16,36,  -31,31,  25,-8, 3,6,  0,0,100);
  setMotors(-45,45,-80,80,-70,70,-45,45, 0,0, -14,37,  -31,31,  27,-7, 0,0,    0,0,100);
                    
  setMotors(-45,45,-80,80,-70,70,-45,45, -2,0,  -13,31, -29,31, 31,-10, -2,0,   0,0,200);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -15,29, -29,31, 29,-12, -8,-5, 0,0,200);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -27,26, -45,31, 33,-15, -8,-5, 0,0,200);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -38,25, -72,31, 37,-17, -8,-5, 0,0,200);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -46,23, -80,31, 38,-18, -8,-5, 0,0,200);
 
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -48,21, -79,31, 35,-20, -8,-5, 0,0,200);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -45,19, -69,31, 25,-22, -8,-5, 0,0,200);
  setMotors(-45,45,-80,80,-70,70,-45,45, -8,-0, -39,18, -51,31, 15,-23, -8,-8, 0,0,200);
  setMotors(-45,45,-80,80,-70,70,-45,45, -5,-0, -36,16, -31,31,  8,-25, -6,-6, 0,0,200);
  setMotors(-45,45,-80,80,-70,70,-45,45,  0,0,  -37,14, -31,31,  7,-27,   0,0,  0,0,200);
                    
}
void Moves::InitPose(){
  setMotorsEnc(350,656,232,783,300,724,358,665,512,512,388,566,412,612,527,427,512,512,512,512,45);
  
}

void Moves::InitPose1(){
  setMotors(-81,81,-34,34,-25,25,-45,45,-3,3,-31,31,-29,29,16,-16,0,0,0,0,45);
}



void Moves::F_Shoot_L(){
  setMotors(-45,45,-68,68,-70,70,-45,45,-1,1,-61,55,-99,100, 51,-45, -10,-10,0,0,70);
  setMotors(-45,45,-68,68,-70,70,-45,45,-4,7,-61,70,-100,147, 51,-65, -16,-10,0,0,80);
  setMotors(-45,45,-68,68,-70,70,-45,45,-4,7,-61,85,-100,21, -45,-13, -16,-10,0,0,400);
  setMotors(-45,45,-68,68,-70,70,-45,45,-4,7,-61,85,-100,65, -45,-13, -10,-10,0,0,100);
  setMotors(-45,45,-68,68,-70,70,-45,45,-4,7,-61,70,-100,147, 51,-65, -16,-10,0,0,300);
  setMotors(-45,45,-68,68,-70,70,-45,45,-1,1,-61,55,-99,100, 51,-45, -10,-10,0,0,100);
  setMotors(-45,45,-68,68,-70,70,-45,45,-1,1,-70,70,-103,102,51,-51,-1,1,0,0,100);
}

//MOVES FROM 18:18 18.03 ALMOST GOOD
#include "move.h"
#define DEVICE_NAME "3" 

#define BAUDRATE  1000000
int32_t goal_position[20];
uint16_t model_number;
uint8_t dxl_id[20];
const uint8_t handler_index = 0;

DynamixelWorkbench dxl_wb;
void Moves::initialization()
{
  
  model_number = 0;
  dxl_wb.init(DEVICE_NAME, BAUDRATE);
  for (int i = 0; i<20; i++){
    dxl_id[i]=i+1;
  }
  for (int cnt = 0; cnt < 20; cnt++)
  {
    dxl_wb.ping(dxl_id[cnt], &model_number);
    dxl_wb.jointMode(dxl_id[cnt], 400, 0); 
  }
  dxl_wb.addSyncWriteHandler(dxl_id[0], "Goal_Position");
}
void Moves::setMotors(int m1,int m2,int m3,int m4,int m5,int m6,int m7,int m8,int m9,int m10,int m11,int m12,int m13,int m14,int m15,int m16,int m17,int m18,int m19,int m20,int delayy){
  bool result = false;
  goal_position[0]=map(m1,-150,150,0,1023);
  goal_position[1]=map(m2,-150,150,0,1023);
  goal_position[2]=map(m3,-150,150,0,1023);
  goal_position[3]=map(m4,-150,150,0,1023);
  goal_position[4]=map(m5,-150,150,0,1023);
  goal_position[5]=map(m6,-150,150,0,1023);
  goal_position[6]=map(m7,-150,150,0,1023);
  goal_position[7]=map(m8,-150,150,0,1023);
  goal_position[8]=map(m9,-150,150,0,1023);
  goal_position[9]=map(m10,-150,150,0,1023);
  goal_position[10]=map(m11,-150,150,0,1023);
  goal_position[11]=map(m12,-150,150,0,1023);
  goal_position[12]=map(m13,-150,150,0,1023);
  goal_position[13]=map(m14,-150,150,0,1023);
  goal_position[14]=map(m15,-150,150,0,1023);
  goal_position[15]=map(m16,-150,150,0,1023);
  goal_position[16]=map(m17,-150,150,0,1023);
  goal_position[17]=map(m18,-150,150,0,1023);
  goal_position[18]=map(m19,-150,150,0,1023);
  goal_position[19]=map(m20,-150,150,0,1023);
  result=dxl_wb.syncWrite(handler_index, &goal_position[0]);
  delay(delayy);
} 
void Moves::Init_Speed(int speed1){
for (int cnt = 0; cnt < 20; cnt++)
  {
    dxl_wb.jointMode(dxl_id[cnt], speed1, 0); 
  }
  
}
void Moves::init(){
  setMotors(-45,45,-80,80,-70,70,-45,45,-1,1,-70,70,-103,102,51,-51,-1,1,0,0,1000);
}
void Moves::ready_for_walk(){
  
  setMotors(-45,45,-80,80,-70,70,-45,45,-1,1,-70,70,-103,102,51,-51,-1,1,0,0,100);
}

void Moves::FFT_M(){
  
  setMotors(-45,45,-68,68,-14,14,-45,45,-1,1,-70,58,-100,100, 48,-57,  7,16,0,0,40); //40 and 98 dlia gladkoi
  setMotors(-45,45,-68,68,-14,14,-45,45,-4,7,-67,76,-100,145, 54,-66,  4,10,0,0,50); //try to 10,16
  //50 and 103 dlia myagkoi
  setMotors(-45,45,-68,68,-14,14,-45,45,-1,1,-58,64,-100,100, 57,-48, -1,-1,0,0,40);
  setMotors(-45,45,-68,68,-14,14,-45,45,-1,1,-58,70,-100,100, 57,-48, -16,-7,0,0,40);
  setMotors(-45,45,-68,68,-14,14,-45,45,-7,4,-76,67,-145,100, 66,-54, -10,-4,0,0,50);
  setMotors(-45,45,-68,68,-14,14,-45,45,-1,1,-64,58,-100,100, 48,-57,  -1,-1,0,0,40);
}
void Moves::FLT_M(){
 
  setMotors(-45,45,-68,68,-14,14,-45,45,-1,1,-70,58,-98,98, 48,-57,  7,16,0,0,60);
  setMotors(-45,45,-68,68,-14,14,-45,45,-4,7,-67,76,-98,137, 54,-66,  4,10,0,0,60);
  setMotors(-45,45,-68,68,-14,14,-45,15,-1,1,-58,64,-98,98, 57,-48, -1,-1,0,0,60);
  setMotors(-45,45,-68,68,-14,14,-15,45,-1,1,-58,70,-98,98, 57,-48, -16,-7,0,0,60);
  setMotors(-45,45,-68,68,-14,14,-45,45,-7,4,-76,67,-137,98, 66,-54, -10,-4,0,0,60);
  setMotors(-45,45,-68,68,-14,14,-45,45,-1,1,-64,58,-98,98, 48,-57,  -1,-1,0,0,60);
}
void Moves::FRT_M(){

  setMotors(-45,45,-68,68,-14,14,-45,45,-1,1,-58,70,-99,98, 57,-48, -19,-7,0,0,60);
  setMotors(-45,45,-68,68,-14,14,-45,45,-7,4,-76,67,-137,98, 66,-54, -10,-4,0,0,60);
  setMotors(-45,45,-68,68,-14,14,-15,45,-1,1,-69,58,-98,98, 48,-57,  -1,1,0,0,60);
  setMotors(-45,45,-68,68,-14,14,-45,15,-1,1,-76,58,-99,98, 45,-60,  7,16,0,0,60);
  setMotors(-45,45,-68,68,-14,14,-45,45,-4,7,-67,76,-99,137, 54,-66,  4,10,0,0,60);
  setMotors(-45,45,-68,68,-14,14,-45,45,-1,1,-58,70,-99,98, 57,-48, -1,-1,0,0,60);
}
void  Moves::M_R(){
  setMotors(-45,45,-68,68,-14,14,-51,51,-25,25,-74,65,-110,99, 60,-51, -7,-1,0,0,100);
  setMotors(-45,45,-68,68,-14,14,-51,51,-10,10,-65,65,-100,100, 51,-51, -7,-1,0,0,70);
  setMotors(-45,45,-68,68,-14,14,-45,45,-1,1,-70,70,-103,103,51,-51,-1,1,0,0,100);
}
void Moves::M_L(){
  setMotors(-45,45,-68,68,-14,14,-51,51,-25,25,-65,74,-99,110, 51,-60, -1,7,0,0,100);
  setMotors(-45,45,-68,68,-14,14,-51,51,-10,10,-65,65,-100,100, 51,-51, -1,7,0,0,70);
  setMotors(-45,45,-68,68,-14,14,-45,45,-1,1,-70,70,-103,103,51,-51,-1,1,0,0,100);
}
void  Moves::TURN_R(){
  setMotors(-45,45,-68,68,-14,14,-21,15,-1,1,-78,69,-117,99, 60,-51, -1,-1,0,0,70);
  setMotors(-45,45,-68,68,-14,14,-30,30,-1,1,-69,69,-100,100, 51,-51, -1,-1,0,0,100);
  setMotors(-45,45,-68,68,-14,14,-45,45,-1,1,-72,72,-103,102,51,-51,-1,1,0,0,100);
}
void Moves::TURN_L(){
  setMotors(-45,45,-68,68,-14,14,-16,21,-1,1,-69,78,-100,117, 51,-61, -1,-1,0,0,70);
  setMotors(-45,45,-68,68,-14,14,-30,30,-1,1,-69,69,-100,100, 51,-51, -1,-1,0,0,100);
  setMotors(-45,45,-68,68,-14,14,-45,45,-1,1,-72,72,-103,102,51,-51,-1,1,0,0,100);
}
void Moves::F_Shoot_R(){
 
  setMotors(-45,45,-80,80,-70,70,-45,45,-1,1,-53,65,-100,100, 67,-55, -10,-10,0,0,200);
  setMotors(-45,45,-80,80,-70,70,-40,45,-1,1,-110,60,-85,100, 12,-55, -10,-13,0,0,250);
  setMotors(-45,45,-80,80,-70,70,-45,45,-1,1,-70,70,-100,100,51,-51,-1,1,0,0,200);
}
void Moves::F_Shoot_L(){
  setMotors(-45,45,-80,80,-70,70,-45,45,-1,1,-65,53,-100,100, 55,-67, 10,10,0,0,200);
  setMotors(-45,45,-80,80,-70,70,-45,40,-1,1,-60,110,-100,85, 55,-12,13,10,0,0,250);
  setMotors(-45,45,-80,80,-70,70,-45,45,-1,1,-70,70,-100,100,51,-51,-1,1,0,0,200);
}
void Moves::GET_UP_BACK(){  
  setMotors(81,-81,34,-34,25,-25,-45,45,-3,3,-31,31,-29,29,16,-16,0,0,0,0,45);
  setMotors(81,-81,34,-34,25,-25,-45,45,-3,3,-31,31,-29,29,16,-16,0,0,0,0,45);
  setMotors(81,-81,34,-34,25,-25,-45,45,-3,3,-31,31,-29,29,16,-16,0,0,0,0,45);  
  }
void Moves::GET_UP_FRONT(){  
  setMotors(81,-81,0,0,14,-14,-46,46,-1,1,-48,48,-67,67,30,-30,-1,1,0,0,300);
  setMotors(14,-14,4,-4,3,-3,-46,46,-1,1,-48,48,-67,67,30,-30,-1,1,0,0,300);
  setMotors(-29,29,-19, 19, 104,-104,-46,46,-4,4,-133,133,114,114,94,-94,-2,2,0,0,300);
  setMotors(34,-34,72, -72, 16,-16,-46,46,0,0,-126,126,-138,138,56,-56,0,0,0,0,300);
  setMotors(81,-81,68, -68, 14,-14,-45,45,-1,1,-61,61,-100,100,51,-51,-1,1,0,0,300);
}

void Moves::setMotorsEnc(int m1,int m2,int m3,int m4,int m5,int m6,int m7,int m8,int m9,int m10,int m11,int m12,int m13,int m14,int m15,int m16,int m17,int m18,int m19,int m20,int delayy){
  bool result = false;
  goal_position[0]=m1;
  goal_position[1]=m2;
  goal_position[2]=m3;
  goal_position[3]=m4;
  goal_position[4]=m5;
  goal_position[5]=m6;
  goal_position[6]=m7;
  goal_position[7]=m8;
  goal_position[8]=m9;
  goal_position[9]=m10;
  goal_position[10]=m11;
  goal_position[11]=m12;
  goal_position[12]=m13;
  goal_position[13]=m14;
  goal_position[14]=m15;
  goal_position[15]=m16;
  goal_position[16]=m17;
  goal_position[17]=m18;
  goal_position[18]=m19;
  goal_position[19]=m20;
  result=dxl_wb.syncWrite(handler_index, &goal_position[0]);
  delay(delayy);
}
 
//MOVES FROM 20:00 18.03
#include "move.h"
#define DEVICE_NAME "3" 

#define BAUDRATE  1000000
int32_t goal_position[20];
uint16_t model_number;
uint8_t dxl_id[20];
const uint8_t handler_index = 0;

DynamixelWorkbench dxl_wb;
void Moves::initialization()
{
  
  model_number = 0;
  dxl_wb.init(DEVICE_NAME, BAUDRATE);
  for (int i = 0; i<20; i++){
    dxl_id[i]=i+1;
  }
  for (int cnt = 0; cnt < 20; cnt++)
  {
    dxl_wb.ping(dxl_id[cnt], &model_number);
    dxl_wb.jointMode(dxl_id[cnt], 400, 0); 
  }
  dxl_wb.addSyncWriteHandler(dxl_id[0], "Goal_Position");
}
void Moves::setMotors(int m1,int m2,int m3,int m4,int m5,int m6,int m7,int m8,int m9,int m10,int m11,int m12,int m13,int m14,int m15,int m16,int m17,int m18,int m19,int m20,int delayy){
  bool result = false;
  goal_position[0]=map(m1,-150,150,0,1023);
  goal_position[1]=map(m2,-150,150,0,1023);
  goal_position[2]=map(m3,-150,150,0,1023);
  goal_position[3]=map(m4,-150,150,0,1023);
  goal_position[4]=map(m5,-150,150,0,1023);
  goal_position[5]=map(m6,-150,150,0,1023);
  goal_position[6]=map(m7,-150,150,0,1023);
  goal_position[7]=map(m8,-150,150,0,1023);
  goal_position[8]=map(m9,-150,150,0,1023);
  goal_position[9]=map(m10,-150,150,0,1023);
  goal_position[10]=map(m11,-150,150,0,1023);
  goal_position[11]=map(m12,-150,150,0,1023);
  goal_position[12]=map(m13,-150,150,0,1023);
  goal_position[13]=map(m14,-150,150,0,1023);
  goal_position[14]=map(m15,-150,150,0,1023);
  goal_position[15]=map(m16,-150,150,0,1023);
  goal_position[16]=map(m17,-150,150,0,1023);
  goal_position[17]=map(m18,-150,150,0,1023);
  goal_position[18]=map(m19,-150,150,0,1023);
  goal_position[19]=map(m20,-150,150,0,1023);
  result=dxl_wb.syncWrite(handler_index, &goal_position[0]);
  delay(delayy);
} 
void Moves::Init_Speed(int speed1){
for (int cnt = 0; cnt < 20; cnt++)
  {
    dxl_wb.jointMode(dxl_id[cnt], speed1, 0); 
  }
  
}
void Moves::init(){
  setMotors(-45,45,-80,80,-70,70,-45,45,-1,1,-70,70,-103,102,51,-51,-1,1,0,0,1000);
}
void Moves::ready_for_walk(){
  
  setMotors(-45,45,-80,80,-70,70,-45,45,-1,1,-70,70,-103,102,51,-51,-1,1,0,0,100);
}

void Moves::FFT_M(){
  setMotors(-81,81,-68,68,-14,14,-45,45,-1,1,-70,58,-103,103, 48,-57,  7,12,0,0,40);
  setMotors(-81,81,-68,68,-14,14,-45,45,-4,7,-67,76,-103,137, 54,-66,  4,10,0,0,40);
  setMotors(-81,81,-68,68,-14,14,-45,45,-1,1,-58,64,-103,103, 57,-48, 0,0,0,0,40);
  setMotors(-91,81,-68,68,-14,14,-45,45,-1,1,-58,70,-103,103, 57,-48, -12,-7,0,0,40);
  setMotors(-81,81,-68,68,-14,14,-45,45,-7,4,-76,67,-137,103, 66,-54, -10,-4,0,0,40);
  setMotors(-81,81,-68,68,-14,14,-45,45,-1,1,-64,58,-103,103, 48,-57,  0,0,0,0,40);
}
void Moves::FLT_M(){
 
  setMotors(-81,81,-68,68,-14,14,-45,45,-1,1,-70,58,-103,103, 48,-57,  7,16,0,0,50);
  setMotors(-81,81,-68,68,-14,14,-45,45,-4,7,-67,76,-103,137, 54,-66,  4,10,0,0,50);
  setMotors(-81,81,-68,68,-14,14,-45,15,-1,1,-58,64,-103,103, 57,-48, -1,-1,0,0,60);
  setMotors(-81,81,-68,68,-14,14,-15,45,-1,1,-58,70,-103,103, 57,-48, -16,-7,0,0,60);
  setMotors(-81,81,-68,68,-14,14,-45,45,-7,4,-76,67,-137,103, 66,-54, -10,-4,0,0,50);
  setMotors(-81,81,-68,68,-14,14,-45,45,-1,1,-64,58,-103,103, 48,-57,  -1,-1,0,0,50);
}
void Moves::FRT_M(){

  setMotors(-81,81,-68,68,-14,14,-45,45,-1,1,-58,70,-103,103, 57,-48, -16,-7,0,0,50);
  setMotors(-81,81,-68,68,-14,14,-45,45,-7,4,-76,67,-137,103, 66,-54, -10,-4,0,0,50);
  setMotors(-81,81,-68,68,-14,14,-15,45,-1,1,-69,58,-103,103, 48,-57,  -1,1,0,0,60);
  setMotors(-81,81,-68,68,-14,14,-45,15,-1,1,-76,58,-103,103, 45,-60,  7,16,0,0,60);
  setMotors(-81,81,-68,68,-14,14,-45,45,-4,7,-67,76,-103,137, 54,-66,  4,10,0,0,50);
  setMotors(-81,81,-68,68,-14,14,-45,45,-1,1,-58,70,-103,103, 57,-48, -1,-1,0,0,50);
}
void  Moves::M_R(){
  setMotors(-81,81,-68,68,-14,14,-51,51,-25,25,-74,65,-110,103, 60,-51, -7,-1,0,0,100);
  setMotors(-81,81,-68,68,-14,14,-51,51,-10,10,-65,65,-103,103, 51,-51, -7,-1,0,0,70);
  setMotors(-81,81,-68,68,-14,14,-45,45,-1,1,-70,70,-103,103,51,-51,-1,1,0,0,100);
}
void Moves::M_L(){
  setMotors(-81,81,-68,68,-14,14,-51,51,-25,25,-65,74,-103,110, 51,-60, -1,7,0,0,100);
  setMotors(-81,81,-68,68,-14,14,-51,51,-10,10,-65,65,-103,103, 51,-51, -1,7,0,0,70);
  setMotors(-81,81,-68,68,-14,14,-45,45,-1,1,-70,70,-103,103,51,-51,-1,1,0,0,100);
}
void  Moves::TURN_R(){
  setMotors(-81,81,-68,68,-14,14,-21,15,-1,1,-78,69,-117,103, 60,-51, -1,-1,0,0,70);
  setMotors(-81,81,-68,68,-14,14,-30,30,-1,1,-69,69,-103,103, 51,-51, -1,-1,0,0,100);
  setMotors(-81,81,-68,68,-14,14,-45,45,-1,1,-72,72,-103,102,51,-51,-1,1,0,0,100);
}
void Moves::TURN_L(){
  setMotors(-81,81,-68,68,-14,14,-16,21,-1,1,-69,78,-103,117, 51,-61, -1,-1,0,0,70);
  setMotors(-81,81,-68,68,-14,14,-30,30,-1,1,-69,69,-103,103, 51,-51, -1,-1,0,0,100);
  setMotors(-81,81,-68,68,-14,14,-45,45,-1,1,-72,72,-103,102,51,-51,-1,1,0,0,100);
}
void Moves::F_Shoot_R(){
 
  setMotors(-45,45,-80,80,-70,70,-45,45,-1,1,-53,65,-100,100, 67,-55, -10,-10,0,0,200);
  setMotors(-45,45,-80,80,-70,70,-40,45,-1,1,-110,60,-85,100, 12,-55, -10,-13,0,0,250);
  setMotors(-45,45,-80,80,-70,70,-45,45,-1,1,-70,70,-100,100,51,-51,-1,1,0,0,200);
}
void Moves::F_Shoot_L(){
  setMotors(-45,45,-80,80,-70,70,-45,45,-1,1,-65,53,-100,100, 55,-67, 10,10,0,0,200);
  setMotors(-45,45,-80,80,-70,70,-45,40,-1,1,-60,110,-100,85, 55,-12, 13,10,0,0,250);
  setMotors(-45,45,-80,80,-70,70,-45,45,-1,1,-70,70,-100,100,51,-51,-1,1,0,0,200);
}
void Moves::GET_UP_BACK(){  
  setMotors(81,-81,34,-34,25,-25,-45,45,-3,3,-31,31,-29,29,16,-16,0,0,0,0,45);
  setMotors(81,-81,34,-34,25,-25,-45,45,-3,3,-31,31,-29,29,16,-16,0,0,0,0,45);
  setMotors(81,-81,34,-34,25,-25,-45,45,-3,3,-31,31,-29,29,16,-16,0,0,0,0,45);  
  }
void Moves::GET_UP_FRONT(){  
  setMotors(81,-81,0,0,14,-14,-46,46,-1,1,-48,48,-67,67,30,-30,-1,1,0,0,300);
  setMotors(14,-14,4,-4,3,-3,-46,46,-1,1,-48,48,-67,67,30,-30,-1,1,0,0,300);
  setMotors(-29,29,-19, 19, 104,-104,-46,46,-4,4,-133,133,114,114,94,-94,-2,2,0,0,300);
  setMotors(34,-34,72, -72, 16,-16,-46,46,0,0,-126,126,-138,138,56,-56,0,0,0,0,300);
  setMotors(81,-81,68, -68, 14,-14,-45,45,-1,1,-61,61,-100,100,51,-51,-1,1,0,0,300);
}

void Moves::setMotorsEnc(int m1,int m2,int m3,int m4,int m5,int m6,int m7,int m8,int m9,int m10,int m11,int m12,int m13,int m14,int m15,int m16,int m17,int m18,int m19,int m20,int delayy){
  bool result = false;
  goal_position[0]=m1;
  goal_position[1]=m2;
  goal_position[2]=m3;
  goal_position[3]=m4;
  goal_position[4]=m5;
  goal_position[5]=m6;
  goal_position[6]=m7;
  goal_position[7]=m8;
  goal_position[8]=m9;
  goal_position[9]=m10;
  goal_position[10]=m11;
  goal_position[11]=m12;
  goal_position[12]=m13;
  goal_position[13]=m14;
  goal_position[14]=m15;
  goal_position[15]=m16;
  goal_position[16]=m17;
  goal_position[17]=m18;
  goal_position[18]=m19;
  goal_position[19]=m20;
  result=dxl_wb.syncWrite(handler_index, &goal_position[0]);
  delay(delayy);
}




